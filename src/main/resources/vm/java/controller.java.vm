package ${packageName}.controller;

import com.ruoyi.common.utils.poi.ExcelUtil;
import com.ruoyi.framework.aspectj.lang.annotation.Log;
import com.ruoyi.framework.aspectj.lang.enums.BusinessType;
import com.ruoyi.framework.web.controller.BaseController;
import com.ruoyi.framework.web.domain.R;
#if($table.crud || $table.sub)
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.google.common.collect.Lists;
import com.ruoyi.framework.web.page.TableDataInfo;
import com.ruoyi.framework.web.page.TableSupport;
#elseif($table.tree)
#end
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.util.Arrays;
import java.util.List;

/**
 * ${functionName} 控制器
 * 
 * @author ${author}
 * @since ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {
    @Autowired
    private I${ClassName}Service service;

    @ApiOperation("查询${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public TableDataInfo<${ClassName}> list(${ClassName} ${className}) {
        Page<${ClassName}> pageDto = TableSupport.getPageDomain().toPage();
        IPage<${ClassName}> page = service.queryPage(pageDto, ${className});
        return getDataTable(page);
    }

    @ApiOperation("导出${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className}) {
        Page<${ClassName}> pageDto = TableSupport.getPageDomain().toPage();
        List<${ClassName}> list = Lists.newArrayList();
        IPage<${ClassName}> page = service.queryPage(pageDto, ${className});
        list.addAll(page.getRecords());
        while (page.getTotal() > 0 && page.getCurrent() < page.getPages()) {
            pageDto.setCurrent(page.getCurrent() + 1);
            page = service.queryPage(pageDto, ${className});
            list.addAll(page.getRecords());
        }
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
        util.exportExcel(response, list, "${functionName}数据");
    }
#elseif($table.tree)
    public R<List<${ClassName}>> list(${ClassName} ${className}) {
        List<${ClassName}> list = service.queryList(${className});
        return R.ok(list);
    }

    @ApiOperation("导出${functionName}列表")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className}) {
        List<${ClassName}> list = service.queryList(${className});
        ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}.class);
        util.exportExcel(response, list, "${functionName}数据");
    }
#end

    @ApiOperation("获取${functionName}详细信息")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping("/{${pkColumn.javaField}}")
    public R<${ClassName}> getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.ok(service.getById(${pkColumn.javaField}));
    }

    @ApiOperation("新增${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public R<Object> add(@Validated @RequestBody ${ClassName} ${className}) {
        return toR(service.save(${className}));
    }

    @ApiOperation("修改${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public R<Object> edit(@Validated @RequestBody ${ClassName} ${className}) {
        return toR(service.updateById(${className}));
    }

    @ApiOperation("删除${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public R<Object> remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return toR(service.removeBatchByIds(Arrays.asList(${pkColumn.javaField}s)));
    }
}
